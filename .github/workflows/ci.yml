name: CI Tests

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-tests:
    name: Rust Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check Rust formatting
      run: cargo fmt --all -- --check
      continue-on-error: true

    - name: Run Clippy lints
      run: cargo clippy --all-targets --all-features -- -W clippy::all
      continue-on-error: true

    - name: Build project
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (test)
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        push: false
        tags: onvif-media-transcoder:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        # Start the container in background
        docker run -d --name test-container \
          -e INPUT_URL="https://demo.unified-streaming.com/k8s/features/stable/video/tears-of-steel/tears-of-steel.ism/.m3u8" \
          -e ONVIF_PORT="8080" \
          -e DEVICE_NAME="Test-Camera" \
          -e ONVIF_USERNAME="admin" \
          -e ONVIF_PASSWORD="test123" \
          -p 8080:8080 \
          onvif-media-transcoder:test

        # Wait for service to start with health check
        echo "Waiting for ONVIF service to start..."
        for i in {1..30}; do
          if curl -s http://localhost:8080/onvif/device_service > /dev/null 2>&1; then
            echo "ONVIF service is responding after ${i}0 seconds"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "ONVIF service failed to start within 5 minutes"
            docker logs test-container
            exit 1
          fi
          echo "Attempt $i/30: ONVIF service not ready yet, waiting..."
          sleep 10
        done

        # Test basic ONVIF endpoint
        echo "Testing ONVIF GetCapabilities endpoint..."
        curl -f -X POST http://localhost:8080/onvif/device_service \
          -H "Content-Type: application/soap+xml" \
          -d '<?xml version="1.0"?><soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope"><soap:Body><GetCapabilities/></soap:Body></soap:Envelope>' \
          || (echo "ONVIF endpoint test failed" && docker logs test-container && exit 1)

        echo "Docker image test passed"

    - name: Cleanup
      if: always()
      run: |
        docker stop test-container || true
        docker rm test-container || true

  markdown-lint:
    name: Markdown Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run markdownlint
      uses: articulate/actions-markdownlint@v1
      with:
        config: .markdownlint.json
        files: '*.md'
        ignore: node_modules
      continue-on-error: true
