name: Build and Publish Docker Images

on:
  release:
    types: [published]
  pull_request:
    branches:
      - main
  workflow_run:
    workflows: ["CI Tests"]
    types: [completed]
    branches: [main]

env:
  REGISTRY: docker.io
  IMAGE_NAME: w4ff1e/onvif-media-transcoder

jobs:
  build-unstable:
    name: Build and Push Unstable
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=unstable
        labels: |
          org.opencontainers.image.title=ONVIF Media Transcoder
          org.opencontainers.image.description=Docker-based ONVIF-compatible media transcoder with WS-Discovery
          org.opencontainers.image.vendor=W4ff1e
          org.opencontainers.image.authors=W4ff1e <https://github.com/W4ff1e>
          org.opencontainers.image.url=https://github.com/W4ff1e/onvif-media-transcoder
          org.opencontainers.image.source=https://github.com/W4ff1e/onvif-media-transcoder
          org.opencontainers.image.documentation=https://github.com/W4ff1e/onvif-media-transcoder/blob/main/README.md
          org.opencontainers.image.licenses=MIT

    - name: Generate cache key for Docker build
      id: docker_cache_key_unstable
      run: |
        # Generate a hash of files that invalidate the Docker build cache for Rust projects
        # This includes Dockerfile, Cargo.toml, and Cargo.lock
        cache_key=$(find Dockerfile Cargo.toml Cargo.lock -type f -print0 | sort -z | xargs -0 sha256sum | sha256sum | awk '{print $1}')
        echo "DOCKER_CACHE_KEY_UNSTABLE=$cache_key" >> $GITHUB_ENV
        echo "Generated Docker Cache Key (Unstable): $cache_key"

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ steps.docker_cache_key_unstable.outputs.DOCKER_CACHE_KEY_UNSTABLE }}
        cache-to: type=gha,mode=max,scope=${{ steps.docker_cache_key_unstable.outputs.DOCKER_CACHE_KEY_UNSTABLE }}

  build-release:
    name: Build and Push Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Debug Release Event
      run: |
        echo "Release event triggered!"
        echo "Event name: ${{ github.event_name }}"
        echo "Event action: ${{ github.event.action }}"
        echo "Release tag: ${{ github.event.release.tag_name }}"
        echo "Release name: ${{ github.event.release.name }}"
        echo "Is draft: ${{ github.event.release.draft }}"
        echo "Is prerelease: ${{ github.event.release.prerelease }}"
        
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=raw,value=latest
        labels: |
          org.opencontainers.image.title=ONVIF Media Transcoder
          org.opencontainers.image.description=Docker-based ONVIF-compatible media transcoder with WS-Discovery
          org.opencontainers.image.vendor=W4ff1e
          org.opencontainers.image.authors=W4ff1e <https://github.com/W4ff1e>
          org.opencontainers.image.url=https://github.com/W4ff1e/onvif-media-transcoder
          org.opencontainers.image.source=https://github.com/W4ff1e/onvif-media-transcoder
          org.opencontainers.image.documentation=https://github.com/W4ff1e/onvif-media-transcoder/blob/main/README.md
          org.opencontainers.image.licenses=MIT

    - name: Generate cache key for Docker build
      id: docker_cache_key_release
      run: |
        # Generate a hash of files that invalidate the Docker build cache for Rust projects
        cache_key=$(find Dockerfile Cargo.toml Cargo.lock -type f -print0 | sort -z | xargs -0 sha256sum | sha256sum | awk '{print $1}')
        echo "DOCKER_CACHE_KEY_RELEASE=$cache_key" >> $GITHUB_ENV
        echo "Generated Docker Cache Key (Release): $cache_key"

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ env.DOCKER_CACHE_KEY_RELEASE }}
        cache-to: type=gha,mode=max,scope=${{ env.DOCKER_CACHE_KEY_RELEASE }}
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  build-pr:
    name: Build PR (Test Only)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Generate cache key for Docker build
      id: docker_cache_key_pr
      run: |
        # Generate a hash of files that invalidate the Docker build cache for Rust projects
        cache_key=$(find Dockerfile Cargo.toml Cargo.lock -type f -print0 | sort -z | xargs -0 sha256sum | sha256sum | awk '{print $1}')
        echo "DOCKER_CACHE_KEY_PR=$cache_key" >> $GITHUB_ENV
        echo "Generated Docker Cache Key (PR): $cache_key"

    - name: Build Docker image (no push)
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: false
        load: false
        tags: onvif-media-transcoder:test
        cache-from: type=gha,scope=${{ env.DOCKER_CACHE_KEY_PR }}
        cache-to: type=gha,mode=max,scope=${{ env.DOCKER_CACHE_KEY_PR }}

  security-scan:
    runs-on: ubuntu-latest
    needs: [build-unstable, build-release]
    if: always() && (needs.build-unstable.result == 'success' || needs.build-release.result == 'success')
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Determine image tag
      id: image-tag
      run: |
        if [[ "${{ needs.build-release.result }}" == "success" ]]; then
          echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        else
          echo "tag=unstable" >> $GITHUB_OUTPUT
        fi
        
    - name: Wait for image to be available
      run: |
        echo "Waiting for image to be available on registry..."
        sleep 30
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'

  update-readme:
    runs-on: ubuntu-latest
    needs: [build-release]
    if: needs.build-release.result == 'success'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Update Docker Hub description
      uses: peter-evans/dockerhub-description@v4
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        repository: ${{ env.IMAGE_NAME }}
        readme-filepath: ./README.md
        short-description: "ONVIF-compatible media transcoder with Docker and WS-Discovery support"